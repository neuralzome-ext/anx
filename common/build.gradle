plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 32
    ndkVersion "20.0.5594570"

    defaultConfig {
        minSdk 23
        targetSdk 32

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17 -frtti -fexceptions'
                arguments "-DZMQ_DIR=" + projectDir.path + "/src/main/libs/zmq"
                arguments "-DPROTOBUF_DIR=" + projectDir.path + "/src/main/libs/protobuf"
                arguments "-DTFLITE_DIR=" + projectDir.path + "/src/main/libs/tflite"
                arguments "-DTFLITE_GPU_DIR=" + projectDir.path + "/src/main/libs/tflite-gpu"
                arguments "-DTFLITE_HEXAGON_DIR=" + projectDir.path + "/src/main/libs/tflite-hexagon"
                arguments "-DANDROID_STL=c++_shared"
                arguments "-DANDROID_PLATFORM=android-24"
            }
        }

        ndk {
            abiFilters 'arm64-v8a'
            debugSymbolLevel 'FULL'
        }
    }

    buildTypes {
        dev {
            minifyEnabled false
        }

        headless {
            minifyEnabled false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    implementation "com.google.protobuf:protobuf-java:${protobuf_java_version}"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

task generateProtoc(description: 'Build java files from proto files') {
    println('Creating java files from .proto files')
    def anxProtoDirPath = rootDir.path + "/api_docs/anx"
    def javaBuildDir = projectDir.path + "/src/main/java"
    def cppBuildDir = projectDir.path + "/src/main/cpp/anx"
    def kotlinBuildDir = projectDir.path + "/src/main/kotlin"

    def protoc = getProtoc()

    def cppBuildDirFile = new File(cppBuildDir)
    if(!cppBuildDirFile.exists()) {
        cppBuildDirFile.mkdirs()
    }

    fileTree(anxProtoDirPath).forEach { file ->
        if (file.name.contains('.proto')) {
            exec {
                workingDir anxProtoDirPath
                commandLine protoc, "--proto_path=.", "--java_out="+javaBuildDir, "--cpp_out="+cppBuildDir,/*"--kotlin_out="+kotlinBuildDir,*/ file.name
            }
        }
    }
    println("Created java files. Check ")
}

def getProtoc() {
    def protoc_version="3.12.4"
    def arch = getOsArch()
    def os = getOsName()

    def protoc = ""
    if (os == "linux") {
        if(arch == "arm64" || arch == "aarch64") {
            protoc = "protoc-$protoc_version-linux-aarch_64"
        }
        if(arch == "x86_64" || arch == "amd64") {
            protoc = "protoc-$protoc_version-linux-x86_64"
        }
    }

    if (os == "osx") {
        if(arch == "arm64" || arch == "aarch64") {
            protoc = "protoc-$protoc_version-osx-aarch_64"
        }
        if(arch == "x86_64") {
            protoc = "protoc-$protoc_version-osx-x86_64"
        }
    }

    if (os == "windows") {
        if(arch == "x64") {
            protoc = "protoc-$protoc_version-win_64.exe"
        }
        if(arch == "x86") {
            protoc = "protoc-$protoc_version-win_32.exe"
        }
    }

    if (protoc == "") {
        throw new GradleException("***** No protoc found for your machine!! *****")
    }

    return "${projectDir.path}/third_party/protoc/$protoc"
}

def getOsName() {
    final String osName = System.getProperty("os.name").toLowerCase()

    if (osName.contains("linux")) {
        return ("linux")
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("osx")
    } else if (osName.contains("windows")) {
        return ("windows")
    }
    return ("unix")
}

def getOsArch() {
    return (System.getProperty("os.arch"))
}

task cleanUpProto(type: Delete) {
    def javaBuildDir = projectDir.path + "/src/main/java/com/flomobility/anx/proto"
    def cppBuildDir = projectDir.path + "/src/main/cpp/anx"
    def kotlinBuildDir = projectDir.path + "/src/main/kotlin/com/flomobility/anx/proto"
    delete javaBuildDir
    delete cppBuildDir
    delete kotlinBuildDir
}

clean.dependsOn 'cleanUpProto'

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn generateProtoc
}
