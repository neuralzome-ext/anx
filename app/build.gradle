plugins {
    id 'kotlin-kapt'
    id 'com.android.application'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'kotlin-parcelize'
}


ext {
    // The packageVariant defines the bootstrap variant that will be included in the app APK.
    // This must be supported by com.flomobility.anx.shared.terminal.TerminalBootstrap.PackageVariant or app will
    // crash at startup.
    // Bootstrap of a different variant must not be manually installed by the user after app installation
    // by replacing $PREFIX since app code is dependant on the variant used to build the APK.
    // Currently supported values are: [ "apt-android-7" "apt-android-5" ]
    packageVariant = System.getenv("TERMUX_PACKAGE_VARIANT") ?: "apt-android-7"
    // Default: "apt-android-7"

}

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion = System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion
    def appVersionName = System.getenv("TERMUX_APP_VERSION_NAME") ?: ""
    def apkVersionTag = System.getenv("TERMUX_APK_VERSION_TAG") ?: ""
    def splitAPKsForDebugBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_DEBUG_BUILDS") ?: "1"
    def splitAPKsForReleaseBuilds = System.getenv("TERMUX_SPLIT_APKS_FOR_RELEASE_BUILDS") ?: "0"
    // F-Droid does not support split APKs #1904

    dependencies {
        implementation "androidx.annotation:annotation:1.3.0"
        implementation("androidx.core:core:1.6.0") {
            exclude module: 'support-v4'
        }
        implementation "androidx.drawerlayout:drawerlayout:1.1.1"
        implementation "androidx.preference:preference:1.1.1"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "com.google.android.material:material:1.4.0"
        //implementation 'com.google.guava:guava:27.0.1-android'
        implementation "com.google.guava:guava:24.1-jre"
        implementation "io.noties.markwon:core:$markwonVersion"
        implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
        implementation "io.noties.markwon:linkify:$markwonVersion"
        implementation "io.noties.markwon:recycler:$markwonVersion"

        // Lifecycle
        implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
        implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
        implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"

        implementation 'androidx.activity:activity-ktx:1.2.0-rc01'
        implementation 'androidx.fragment:fragment-ktx:1.3.0-rc01'

        // Timber
        implementation 'com.jakewharton.timber:timber:4.7.1'

        implementation "com.google.android.gms:play-services-auth:20.3.0"
        implementation "androidx.security:security-crypto:1.0.0-alpha02"

        //Multidex
        implementation 'com.android.support:multidex:1.0.3'

        // Coroutines
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'

        // ZMQ - JAVA
        implementation 'org.zeromq:jeromq:0.5.2'

        implementation 'com.github.felHR85:UsbSerial:6.1.0'

        // Dagger-Hilt
        implementation "com.google.dagger:hilt-android:2.42"
        implementation 'androidx.camera:camera-video:1.1.0'
        kapt "com.google.dagger:hilt-compiler:2.42"

        // serialization
        implementation 'com.google.code.gson:gson:2.8.9'

        implementation 'com.github.ybq:Android-SpinKit:1.4.0'

        // apache commons
        implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

        def retrofit_version = '2.9.0'
        def okhttp_version = '4.9.0'
        // Retrofit
        implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
        implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

        implementation "com.mindorks.android:prdownloader:0.6.0"
        implementation "com.airbnb.android:lottie:5.2.0"

        implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

        def camerax_version = "1.1.0"

        // Import the BoM for the Firebase platform
        implementation platform('com.google.firebase:firebase-bom:31.0.3')
        implementation 'com.google.firebase:firebase-crashlytics-ktx'
        implementation 'com.google.firebase:firebase-analytics-ktx'

        // CameraX core library using camera2 implementation
        implementation "androidx.camera:camera-camera2:$camerax_version"

        // CameraX Lifecycle Library
        implementation "androidx.camera:camera-lifecycle:$camerax_version"

        // usb camera utils
        implementation("com.serenegiant:common:${commonLibVersion}") {
            exclude module: 'support-v4'
        }

        // chrome custom tab
        implementation "androidx.browser:browser:1.3.0"

        implementation project(":terminal-view")
        implementation project(":termux-shared")

        implementation project(':usbCameraCommon')
        implementation project(':libuvccamera')

        //Location
        implementation 'com.google.android.gms:play-services-location:20.0.0'

        // usb camera utils
        implementation("com.serenegiant:common:${commonLibVersion}") {
            exclude module: 'support-v4'
        }

        // custom switch
        implementation 'com.github.angads25:toggle:1.1.0'

    }

    defaultConfig {
        applicationId "com.flomobility.anx"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 12
        versionName "0.8.3"

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def FLO_DEVELOPMENT_URL = "FLO_DEVELOPMENT_URL"
        def FLO_STAGING_URL = "FLO_STAGING_URL"
        def FLO_PRODUCTION_URL = "FLO_PRODUCTION_URL"

        buildConfigField("String", "FLO_DEVELOPMENT_URL", properties.getProperty(FLO_DEVELOPMENT_URL))
        buildConfigField("String", "FLO_STAGING_URL", properties.getProperty(FLO_STAGING_URL))
        buildConfigField("String", "FLO_PRODUCTION_URL", properties.getProperty(FLO_PRODUCTION_URL))


        if (appVersionName) versionName = appVersionName
        validateVersionName(versionName)

        buildConfigField "String", "TERMUX_PACKAGE_VARIANT", "\"" + project.ext.packageVariant + "\""
        // Used by TermuxApplication class

        manifestPlaceholders.TERMINAL_APP_NAME = "anx"
        manifestPlaceholders.TERMINAL_API_APP_NAME = "Terminal:API"
        manifestPlaceholders.TERMINAL_BOOT_APP_NAME = "Terminal:Boot"
        manifestPlaceholders.TERMINAL_FLOAT_APP_NAME = "Terminal:Float"
        manifestPlaceholders.TERMINAL_STYLING_APP_NAME = "Terminal:Styling"
        manifestPlaceholders.TERMINAL_TASKER_APP_NAME = "Terminal:Tasker"
        manifestPlaceholders.TERMINAL_WIDGET_APP_NAME = "Terminal:Widget"

        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        ndk {
            abiFilters 'arm64-v8a'
        }

/*        splits {
            abi {
                enable ((gradle.startParameter.taskNames.any { it.contains("Debug") } && splitAPKsForDebugBuilds == "1") ||
                    (gradle.startParameter.taskNames.any { it.contains("Release") } && splitAPKsForReleaseBuilds == "1"))
                reset ()
                include *//*'x86', 'x86_64', 'armeabi-v7a', *//*'arm64-v8a'
                universalApk false
            }
        }*/
    }

    signingConfigs {

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def KEYSTORE_FILE_PATH = "KEYSTORE_FILE_PATH"
        def KEYSTORE_PASSWORD = "KEYSTORE_PASSWORD"
        def KEY_ALIAS = "KEY_ALIAS"
        def KEY_PASSWORD = "KEY_PASSWORD"

        flo {
            storeFile file(properties.getProperty(KEYSTORE_FILE_PATH))
            storePassword properties.getProperty(KEYSTORE_PASSWORD)
            keyAlias properties.getProperty(KEY_ALIAS)
            keyPassword properties.getProperty(KEY_PASSWORD)
        }

        debug {
            storeFile file('testkey_untrusted.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        dev {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            manifestPlaceholders.TERMINAL_PACKAGE_NAME = "com.flomobility.anx"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
            versionNameSuffix "-dev"
//            applicationIdSuffix ".dev"
            resValue "string", "application_name", "(D)anx"
        }
        release {
            minifyEnabled true
            shrinkResources true // Reproducible builds
            debuggable true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            firebaseCrashlytics {
                mappingFileUploadEnabled true
            }
            manifestPlaceholders.TERMINAL_PACKAGE_NAME = "com.flomobility.anx"
            resValue "string", "application_name", "anx"
        }
        headless {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.flo
            manifestPlaceholders.TERMINAL_PACKAGE_NAME = "com.flomobility.anx"
            versionNameSuffix "-headless"
            resValue "string", "application_name", "(H)anx"
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }

/*        debug {
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
            manifestPlaceholders.TERMINAL_PACKAGE_NAME = "com.flomobility.anx"
//            applicationIdSuffix ".debug"
            resValue "string", "application_name", "(Debug)anx"
        }*/
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }

    lintOptions {
        disable 'ProtectedPermissions'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            switch (variant.buildType.name) {
                case "dev" && "headless":
                    outputFileName = new File("anx-app_dev_v" + defaultConfig.versionName + ".apk")
                    break
                case "debug":
                    outputFileName = new File("anx-app_debug_v" + defaultConfig.versionName + ".apk")
                    break
                case "release":
                    outputFileName = new File("anx-app_release_v" + defaultConfig.versionName + ".apk")
                    break
            }
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude "META-INF/**"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

def validateVersionName(String versionName) {
    // https://semver.org/spec/v2.0.0.html#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    // ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    if (!java.util.regex.Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '" + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}

def downloadBootstrap(String arch, String expectedChecksum, String version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def localUrl = "src/main/cpp/bootstrap-" + arch + ".zip"
    def file = new File(projectDir, localUrl)
    if (file.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(file)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        while (checksum.length() < 64) {
            checksum = "0" + checksum
        }
        if (checksum == expectedChecksum) {
            return
        } else {
            logger.quiet("Deleting old local file with wrong hash: " + localUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
            file.delete()
        }
    }

    def remoteUrl = "https://github.com/flomobility/anx/releases/download/bootstrap-" + version + "/bootstrap-" + arch + ".zip"
    logger.quiet("Downloading " + remoteUrl + " ...")

    file.parentFile.mkdirs()
    def out = new BufferedOutputStream(new FileOutputStream(file))

    def connection = new URL(remoteUrl).openConnection()
    connection.setInstanceFollowRedirects(true)
    def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
    out << digestStream
    out.close()

    def checksum = new BigInteger(1, digest.digest()).toString(16)
    while (checksum.length() < 64) {
        checksum = "0" + checksum
    }
    if (checksum != expectedChecksum) {
        file.delete()
        throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
    }
}

/*clean {
    doLast {
        def tree = fileTree(new File(projectDir, 'src/main/cpp'))
        tree.include 'bootstrap-*.zip'
        tree.each { it.delete() }
    }
}*/

task downloadBootstraps() {
    return
/*    doLast {
        def packageVariant = project.ext.packageVariant
        if (packageVariant == "apt-android-7") {
            def version = "2022.04.28-r5" + "+" + packageVariant
            downloadBootstrap("aarch64", "4a51a7eb209fe82efc24d52e3cccc13165f27377290687cb82038cbd8e948430", version)
            downloadBootstrap("arm", "6459a786acbae50d4c8a36fa1c3de6a4dd2d482572f6d54f73274709bd627325", version)
            downloadBootstrap("i686", "919d212b2f19e08600938db4079e794e947365022dbfd50ac342c50fcedcd7be", version)
            downloadBootstrap("x86_64", "61b02fdc03ea4f5d9da8d8cf018013fdc6659e6da6cbf44e9b24d1c623580b89", version)
        } else if (packageVariant == "apt-android-5") {
            def version = "2022.04.28-r6" + "+" + packageVariant
            downloadBootstrap("aarch64", "913609d439415c828c5640be1b0561467e539cb1c7080662decaaca2fb4820e7", version)
            downloadBootstrap("arm", "26bfb45304c946170db69108e5eb6e3641aad751406ce106c80df80cad2eccf8", version)
            downloadBootstrap("i686", "46dcfeb5eef67ba765498db9fe4c50dc4690805139aa0dd141a9d8ee0693cd27", version)
            downloadBootstrap("x86_64", "615b590679ee6cd885b7fd2ff9473c845e920f9b422f790bb158c63fe42b8481", version)
        } else {
            throw new GradleException("Unsupported TERMUX_PACKAGE_VARIANT \"" + packageVariant + "\"")
        }
    }*/
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompileProvider.get().dependsOn(downloadBootstraps)
    }
}
