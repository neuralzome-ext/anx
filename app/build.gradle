plugins {
    id 'kotlin-kapt'
    id 'com.android.application'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.android'
//    id 'com.google.gms.google-services'
//    id 'com.google.firebase.crashlytics'
    id 'kotlin-parcelize'
}

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion = System.getenv("JITPACK_NDK_VERSION") ?: project.properties.ndkVersion
    def appVersionName = System.getenv("TERMUX_APP_VERSION_NAME") ?: ""

    dependencies {
        implementation "androidx.annotation:annotation:1.3.0"
        implementation("androidx.core:core:1.6.0") {
            exclude module: 'support-v4'
        }
        implementation "androidx.drawerlayout:drawerlayout:1.1.1"
        implementation "androidx.preference:preference:1.1.1"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "com.google.android.material:material:1.4.0"
        //implementation 'com.google.guava:guava:27.0.1-android'
        implementation "com.google.guava:guava:24.1-jre"
        implementation "io.noties.markwon:core:$markwonVersion"
        implementation "io.noties.markwon:ext-strikethrough:$markwonVersion"
        implementation "io.noties.markwon:linkify:$markwonVersion"
        implementation "io.noties.markwon:recycler:$markwonVersion"

        // Lifecycle
        implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
        implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
        implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.5.1"

        implementation 'androidx.activity:activity-ktx:1.2.0-rc01'
        implementation 'androidx.fragment:fragment-ktx:1.3.0-rc01'

        // Timber
        implementation 'com.jakewharton.timber:timber:4.7.1'

        implementation "androidx.security:security-crypto:1.0.0-alpha02"

        //Multidex
        implementation 'com.android.support:multidex:1.0.3'

        // Coroutines
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'

        // ZMQ - JAVA
        implementation 'org.zeromq:jeromq:0.5.2'

        implementation 'com.github.felHR85:UsbSerial:6.1.0'

        // Dagger-Hilt
        implementation "com.google.dagger:hilt-android:2.42"
        implementation 'androidx.camera:camera-video:1.1.0'
        kapt "com.google.dagger:hilt-compiler:2.42"

        // serialization
        implementation 'com.google.code.gson:gson:2.8.9'

        implementation 'com.github.ybq:Android-SpinKit:1.4.0'

        // apache commons
        implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

        def retrofit_version = '2.9.0'
        def okhttp_version = '4.9.0'
        // Retrofit
        implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
        implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

        implementation "com.mindorks.android:prdownloader:0.6.0"
        implementation "com.airbnb.android:lottie:5.2.0"

        implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

        def camerax_version = "1.1.0"
        // CameraX core library using camera2 implementation
        implementation "androidx.camera:camera-camera2:$camerax_version"

        // CameraX Lifecycle Library
        implementation "androidx.camera:camera-lifecycle:$camerax_version"

        // usb camera utils
        implementation("com.serenegiant:common:${commonLibVersion}") {
            exclude module: 'support-v4'
        }

        // chrome custom tab
        implementation "androidx.browser:browser:1.3.0"

        implementation project(':usbCameraCommon')
        implementation project(':libuvccamera')

        implementation project(':assets')
        implementation project(':device')
        implementation project(':protoc')

        //Location
        implementation 'com.google.android.gms:play-services-location:20.0.0'

        // usb camera utils
        implementation("com.serenegiant:common:${commonLibVersion}") {
            exclude module: 'support-v4'
        }

        // custom switch
        implementation 'com.github.angads25:toggle:1.1.0'

    }

    defaultConfig {
        applicationId "com.flomobility.anx"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 15
        versionName "0.9.0"

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def FLO_DEVELOPMENT_URL = "FLO_DEVELOPMENT_URL"
        def FLO_STAGING_URL = "FLO_STAGING_URL"
        def FLO_PRODUCTION_URL = "FLO_PRODUCTION_URL"

        buildConfigField("String", "FLO_DEVELOPMENT_URL", properties.getProperty(FLO_DEVELOPMENT_URL))
        buildConfigField("String", "FLO_STAGING_URL", properties.getProperty(FLO_STAGING_URL))
        buildConfigField("String", "FLO_PRODUCTION_URL", properties.getProperty(FLO_PRODUCTION_URL))


        if (appVersionName) versionName = appVersionName
        validateVersionName(versionName)

        externalNativeBuild {
            ndkBuild {
                cFlags "-std=c11", "-Wall", "-Wextra", "-Werror", "-Os", "-fno-stack-protector", "-Wl,--gc-sections"
            }
        }

        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    signingConfigs {

        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        def KEYSTORE_FILE_PATH = "KEYSTORE_FILE_PATH"
        def KEYSTORE_PASSWORD = "KEYSTORE_PASSWORD"
        def KEY_ALIAS = "KEY_ALIAS"
        def KEY_PASSWORD = "KEY_PASSWORD"

        flo {
            storeFile file(properties.getProperty(KEYSTORE_FILE_PATH))
            storePassword properties.getProperty(KEYSTORE_PASSWORD)
            keyAlias properties.getProperty(KEY_ALIAS)
            keyPassword properties.getProperty(KEY_PASSWORD)
        }

        debug {
            storeFile file('testkey_untrusted.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        dev {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev"
            applicationIdSuffix ".dev"
            resValue "string", "application_name", "(D)anx"
        }
        release {
            minifyEnabled true
            shrinkResources true // Reproducible builds
            debuggable true
            signingConfig signingConfigs.flo
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            manifestPlaceholders.TERMINAL_PACKAGE_NAME = "com.flomobility.anx"
            resValue "string", "application_name", "anx"
        }
        headless {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.flo
            versionNameSuffix "-headless"
            applicationIdSuffix ".headless"
            resValue "string", "application_name", "(H)anx"
        }
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path "src/main/cpp/Android.mk"
        }
    }

    lintOptions {
        disable 'ProtectedPermissions'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            switch (variant.buildType.name) {
                case "dev":
                    outputFileName = new File("anx-app_dev_v" + defaultConfig.versionName + ".apk")
                    break
                case "headless":
                    outputFileName = new File("anx-app_headless_v" + defaultConfig.versionName + ".apk")
                    break
                case "release":
                    outputFileName = new File("anx-app_release_v" + defaultConfig.versionName + ".apk")
                    break
            }
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude "META-INF/**"
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

def validateVersionName(String versionName) {
    // https://semver.org/spec/v2.0.0.html#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
    // ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
    if (!java.util.regex.Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '" + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}
